#######################################
Laravel
#######################################

# Neues Projekt anlegen
$ composer create-project laravel/laravel <projectname>


# Internen Entwicklungsserver starten
+  Projektverzeichnis wechseln und Terminal öffnen
$ php artisan serve


# Datenbank einrichten
+ Konfigurationsdatei ".env" Datei im Bereich "DB_CONNECTION"
+ config/database.php


# DB_CONNECTION Test im Terminal folgende Standard Migration ausführen
+ /database/migrations
+ vordefinierte Standard Migration
$ php artisan migrate

+ Migration rückgägngig machen
$ php artisan migrate:rollback

+ eigene Migration definieren
+ es wird eine neue Migration-Datei im Verzeichnis /database/migrations angelegt
$ php artisan make:migration create_test_table


# Bootstrap Einbindung
$ composer require laravel/ui (Linux Terminal)
$ composer artisan ui bootstrap (Linux Terminal)
oder 
+ Optionen des Befehls ui
$ php artisan help ui


# node.js / npm Version unter Ubuntu erneuern
+ löscht die aktuell installierte Version von node.js und npm
$ sdo apt-get purge nodejs npm

+ Installiert die neueste Version von node.js und npm
$ curl -L https://bit.ly/n-install | bash



------------------------------------------------------------------------
# artisan
------------------------------------------------------------------------
+ Befehlsübersicht von artisan
$ php artisan list

+ 
$ php artisan:publish



------------------------------------------------------------------------
# Schritt für Schritt Anleitung bei Projekt-Neuanlage
------------------------------------------------------------------------
+1) Projekt Grundgerüst erstellen
$ composer create-project laravel/laravel <projectname>

+2) Datenbank Anbindung (MySQL)
+ /.env

+3) Ausführen der benötigten Tabellenstruktur
$ php artisan migrate

+4) ui aktivieren
$ composer require laravel/ui
+ ui testen
$ php artisan help ui

+5) Auth-Gerüst einrichten
$ php artisan ui bootstrap --auth

+6) npm installieren
$ npm install

+7) npm ausführen
$ npm run dev


------------------------------------------------------------------------
# Steps To Install Bootstrap to a Laravel Application (Using NPM)
------------------------------------------------------------------------

--Step #1--
+ You need to install laravel/ui package.
$ composer require laravel/ui

Step #2
+ Add Bootstrap library using laravel/ui
$ php artisan ui bootstrap

--Step #3--
+ Install Bootstrap Icon
$ npm install bootstrap-icons

+ Now, import icon css on resources\sass\app.scss,
+ File resources\sass\app.scss,
/* Fonts */ 
@import url('https://fonts.bunny.net/css?family=Nunito'); 

/* Variables */ 
@import 'variables'; 

/* Bootstrap */ 
@import 'bootstrap/scss/bootstrap'; 
@import 'bootstrap-icons/font/bootstrap-icons.css';

--Step #4--
Build CSS and JS File. Run these commands step by step to your project terminal.
$ npm install 
$ npm run build






#################################################
Grundgerüst mit Testdaten erstellen
#################################################

------------------------------------------------------------------------
# Migration | /Database/migrations
------------------------------------------------------------------------
+ Migration erstellen
$ php artisan make:migration create_songs_table

+ /Database/migrations 
+ Neu erstellten Migration-Datei editieren
+ Migration ausführen
$ php artisan migrate



------------------------------------------------------------------------
# Model
------------------------------------------------------------------------
+ Model erstellen
$ php artisan make:Model Song



------------------------------------------------------------------------
# Factory | /Database/factories (Dummydaten anlegen)
------------------------------------------------------------------------
+ Factory erstellen
$ php artisan make:factory

+ Neu erstellte Factory-Datei editieren
+ Factory ausführen über Shell Tinker
$ php artisan Tinker
> use App\Models\Song;
> $songs = Song::factory->counter(30)->create();



------------------------------------------------------------------------
# Eloquent-Operationen
------------------------------------------------------------------------
Eloquent ORM
Object Relational Mapping (ORM) ist eine Programmiertechnik zur Konvertierung von Daten 
zwischen relationalen Datenbanken und objektorientierten Programmiersprachen. 
Mit der ORM-Technik können Objekte auf die Strukturen einer relationalen Datenbank abgebildet werden.

Model definieren:
Laravel-Framework geht davon, dass der Primary-Key immer "id" heisst.
Mit diesem Beispiel 
class Song extends Model
{
    protected $table = 'songs';
    protected $primaryKey = 'song_id';
    protected $fillable = ['title','band',];
}

Wenn die Namenskonvention eingehalten wurde reicht auch das standard erzeugte Model
Model-Name groß geschrieben singular und Tabellen Name kleingeschrieben und prural
class Student extends Model
{
    use HasFactory;
}

+ Shell öffnen
$ php artisan tinker

+ Namensraum ermitteln
> use App\Models\Song;

+ Zeigt alle Songs aus der Tabelle "songs" an
> $songs = Song::all();

+ Einzelne Datensätze anzeigen lassen
> $song = Song::find(30);

+ Neuen Datensatz anlegen
> $song = new Song();
> $song->title = 'Ein neuer Titel';
> $song->band = 'Bandname';
> $song->save();

+ Datensatz löschen
> $song = Song::find(31);
> $song->delete();



------------------------------------------------------------------------
# Controller
------------------------------------------------------------------------
+ Controller anlegen
$ php artisan make:controller SongsController --resource



------------------------------------------------------------------------
# Routing
------------------------------------------------------------------------
+ Namensraum in der Routing-Datei web.php bekanntgeben 
use App\Http\Controller\SongController;
Route::resource('/songs', SongController::class);

+ Alle Routen anzeigen lassen
$ php artisan route:list

+ Beispiel "href"
<a href="/songs/{{ $song->id }}">

+ Beispiel "href" mit der URL-Hilfsfunktion
<a href="{{ url('/songs', ['id'=> $song->id])}}

+ Helferfunktionen für vollständig qualifizierte URLs
- url()
- route() - erwartet Namen einer Route
Parameter als Array übergeben
{{ url('/notes',[$id => $notes -> id]) }}



------------------------------------------------------------------------
# MVC - Model-View-Controller
------------------------------------------------------------------------
+ Modell (Model):
Daten, die dargestellt werden sollen

+ Präsentation (View):
Darstellung der Daten aus dem Modell und Entgegennahme von Benutzerinteraktionen

+ Steuerung (Controller):
verwaltet Präsentation, sorgt dafür, dass Benutzeraktionen wirksam werden, indem sie 
beispielsweise an das Modell weitergeleitet werden.



------------------------------------------------------------------------
# CSRF - Cross-Site-Request-Forgery (Website-übergreifende Anfragenfälschung)
------------------------------------------------------------------------
- Autorisierter Nutzer (überprüft beispielsweise über Cookies)
- z.B. ihm untergeschobene URL mit bestimmter Aktion
- diese Aktion wird mit seiner Autorisierung ausgeführt
Beispiel:
Die CSRF-Direktive muss im Formular hinterlegt sein!

<form method="POST" action="/songs">
    @csrf
    .
    .
    <input type=" .....
</form>



------------------------------------------------------------------------
# Fehlermeldungen eindeutschen
------------------------------------------------------------------------
+ GitHub "Laravel-Lang/lang"
+ Application auf deutsch stellen "/.env" und/oder "/config/app.php"
+ Ordner aus GitHub in die Application kopieren



------------------------------------------------------------------------
# Query Builder (für Abfragen in Laravel)
------------------------------------------------------------------------
$ php artisan Tinker
Beispiel:
$user = DB::table('songs')->where('id','>',4)->get();
oder
$user = DB::table('songs')->where('id','>',4)->orderBy('title','asc')->get();



------------------------------------------------------------------------
# File-Upload
------------------------------------------------------------------------
+ Files werden in folgenden Ordner von Laravel NICHT verschlüsselt abgelegt
/storage/app/public/files



------------------------------------------------------------------------
# Daten speichern und abrufen
------------------------------------------------------------------------
+ /config/session.php



------------------------------------------------------------------------
# vite
------------------------------------------------------------------------
+ Installieren von eigenen Styles
/resources/css/app.css
/resources/js/app.js

+ Einbindung in das Projekt (layout.blade.php)
@vite(['resources/css/app.css','resources/js/app.js'])

+ vite-Konfigurationsdatei
/ vite.config.js

+ vite-Server Referenz (für das Developsystem)
$ npm run dev 
<script type="module" src="http://127.0.0.1:5173/@vite/client"></script>
<script type="module" src="http://127.0.0.1:5173/resources/js/app.js"></script>
<link rel="stylesheet" href="http://127.0.0.1:5173/resources/css/app.css">

+ Laravel-Server Referenz (für Prod-System)
+ /public/build/assets
$ npm run build 
<link rel="preload" as="style" href="http://localhost:8002/build/assets/app-Adwxz7y0.css">
<link rel="modulepreload" href="http://localhost:8002/build/assets/app-C1-XIpUa.js">
<link rel="stylesheet" href="http://localhost:8002/build/assets/app-Adwxz7y0.css">
<script type="module" src="http://localhost:8002/build/assets/app-C1-XIpUa.js></script>


------------------------------------------------------------------------
# Validierung
------------------------------------------------------------------------
$ php artisan lang:publish

+ Ordner fuer de anlegen
/lang/de/validation.php

+ Konfigurationsdatei editieren /.env
APP_LOCALE=de
APP_FALLBACK_LOCALE=de
APP_FAKER_LOCALE=de



------------------------------------------------------------------------
# SESSION 
------------------------------------------------------------------------
/.env

SESSION_DRIVER
SESSION_LIFETIME
SESSION_ENCRYPT
SESSION_PATH
SESSION_DOMAIN

$ php artisan config:cache