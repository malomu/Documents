#######################################
Git und Github Befehlsreferenz 
#######################################

## Anlage eines Repositories
$ git init

++++++++++++++++++++++++++++
Konfiguration
++++++++++++++++++++++++++++
## Aktuelle Konfiguration anzeigen
$ git config -l

## Grundkonfiguration (benoetigt man fuer den Befehl "commit"
# Global fuer alle Repositories auf diesem Rechner setzen
$ git config --global user.email "test@gmx.de"
$ git config --global user.name "malomu"

# Nur speziell fuer dieses Repository setzen
$ git config --local user.email "test@gmx.de"
$ git config --local user.name "malomu"

## Git einen bestimmten Editor fuer das bearbeiten der Commits zuweisen.
# In bash
$ export GIT_EDITOR=vim
# In tcsh
$ setenv GIT_EDITOR emacs

## Konfigurationseinstellung entfernen z.B. die user.email
$ git config --unset --global user.email

## Git unterstuetzt eine Hierarchie von Konfigurationsdateien.
   In absteigender Reihenfolge sind das die folgenden.
.git/config
~/.gitconfig
/etc/gitconfig

#######################################

## Alle Dateien die in dieser Datei aufgelistet sind, werden von git ignoriert werden.
.gitignore

$ git status

## Aenderungen der Datei "test.html" auf die Staging-Area verschieben
$ git add test.html
ODER wenn man alle Aenderungen auf die Staging-Area verschieben moechte
$ git add .

$ git commit -m "Kommentar" 

$ git diff test.html 

$ git log --pretty=oneline 
oder
$ git log --oneline

## Aenderungen aller Dateien auf die Staging-Area verschieben und commiten
$ git commit -am 'message'

## Aenderungen rueckgaengig machen
$ git revert hier steht die eindeutige Nummer
$ git revert --continue

## Hier werden die letzten zwei commits unwiederbringlich geloescht
$ git reset --hard HEAD~2

## Hier wird der letzte commit wieder goeffnet und man kann ihn nach der Anpassung neu commiten
$ git reset --soft HEAD~1

## Hier kann man seine ganzen Aenderungen rueckgaengig machen und den urspruenglichen Zustand herstellen
$ git checkout test.html

#######################################


++++++++++++++++++++++++++++
Branches
++++++++++++++++++++++++++++
## Alle Branch anzeigen lassen
$ git branch

## Branch anlegen 
$ git checkout -b <branch name> 

## Branche wechseln (hier wird z.B. in den Haupt-Branch gewechselt)
$ git checkout main

## Branch loeschen
Hier kann es sein, dass man den Branch zuerst mergen muss
$ git branch -d <branche name> 

## Branch loeschen erzwingen
$ git branch -D <branche name> 

## Remote-Repository
   Mein Branch existriert nur lokal. Wie kann ich ihn zu meinem Remote-Git-Repository hinzufuegen?
$ git push --set-upstraem origin <branch name>

   GitHub Remote-Branch loeschen
$ git push origin --delete <branch name>

## Wie kann ich den main-branch mit den Aenderungen in meinem Branch aktualisieren?
+  Main-Branch wird mit Feature-Branch aktualisiert
$ git checkout <Main-Branch>
$ git merge <Feature-Branch>

++++++++++++++++++++++++++++
Github
++++++++++++++++++++++++++++
## Aenderungen auf den Server speichern
git push

## Die neuesten Aenderungen von Github holen
git pull

++++++++++++++++++++++++++++
TopTen der git-Befehle
++++++++++++++++++++++++++++
01) $ git status
02) $ git add .                | es werden alle Dateien, die veraendert wurden in die Staging-Area, befor ich sie commite
03) $ git commit -m "message" 
04) $ git log --oneline
05) $ git checkout <Branche> oder git checkout <Datei>
06) $ git diff <Datei>
07) $ git merge <Branche>
08) $ git reset --soft HEAD~1 oder git reset --hard HEAD~1
09) $ git revert HEAD~0        | hiermit wird der letzte commit rueckgaengig und zwar so dass er ein eigener commit ist
10) $ git pull oder git push 

++++++++++++++++++++++++++++
Schritt fuer Schritt Anleitung
++++++++++++++++++++++++++++

## Projekt aus GitHub auf den lokalen Rechner holen 
+ Diese URL kann man in GitHub über Clone HTTPS kopieren
$ git clone https://github.com/malomu/testarea.git

## Aenderungen in GitHub einspielen
  |-> Die Aenderungen sind jetzt im HEAD deines lokalen Repositories.
$ git push origin master

## Branch in GitHub einspielen
  |-> Die Änderungen sind aktuell in einem Branch
$ git push --set-upstraem origin "branch name"


++++++++++++++++++++++++++++
Git - Tipps und Tricks LinkedIn
++++++++++++++++++++++++++++
- stash -
+ Zeigt die aktuelle stash-Liste an
$ git stash list

+ Legt einen neuen stash an
$ git stash save "test-01"

Zeigt die Unterschiede zwischen dem Arbeitsverzeichnis und dem ausgewählten stash an
$ git stash -p "stash@{0}"

$ git stash apply "stash@{0}"

$ git stash drop "stash@{0}"

$ git stash clear


++++++++++++++++++++++++++++
Fragen
++++++++++++++++++++++++++++
+ Was ist ein Draft-Commit?

